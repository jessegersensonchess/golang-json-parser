// example of using golang for json API processing
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"time"
)

// struct generated by https://transform.tools/json-to-go
type apiResponse struct {
	Page       int `json:"page"`
	PerPage    int `json:"per_page"`
	Total      int `json:"total"`
	TotalPages int `json:"total_pages"`
	Data       []struct {
		ID              int    `json:"id"`
		Timestamp       int64  `json:"timestamp"`
		Status          string `json:"status"`
		OperatingParams struct {
			RotorSpeed    int     `json:"rotorSpeed"`
			Slack         int     `json:"slack"`
			RootThreshold float64 `json:"rootThreshold"`
		} `json:"operatingParams"`
		Asset struct {
			ID    int    `json:"id"`
			Alias string `json:"alias"`
		} `json:"asset"`
		Parent interface{} `json:"parent,omitempty"`
	} `json:"data"`
}

// boiler plate code from https://codezup.com/fetch-parse-json-from-http-endpoint-golang/
func getData(url string) (apiResponse, error) {
	c := apiResponse{}
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return c, err
	}
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		return c, err
	}
	if res.Body != nil {
		defer res.Body.Close()
	}
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return c, err
	}
	err = json.Unmarshal(body, &c)
	if err != nil {
		return c, err
	}
	return c, nil
}

/*
 * Complete the 'numDevices' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. STRING statusQuery
 *  2. INTEGER threshold
 *  3. STRING dateStr
 * https://jsonmock.hackerrank.com/api/iot_devices/search?status=<statusQuery>&page=<pageNumber>
 */

func numDevices(statusQuery string, threshold int32, dateStr string) (totalNumberOfDevices int32) {
	// reformat date from MM-YYYY -> YYYY-MM-01
	layout := "2006-01-02"
	myDate := strings.Split(dateStr, "-")
	dateStr = fmt.Sprintf("%s-%s-01", myDate[1], myDate[0])
	t, _ := time.Parse(layout, dateStr)

	// set the timeframe to search within
	min := t.Unix() * 1000
	// 'nextMonth' == the month's upper bound
	nextMonth := t.AddDate(0, 1, 0)
	max := nextMonth.Unix() * 1000

	counter := 0
	page := 1
	nextPage := true
	for nextPage == true {
		url := fmt.Sprintf("https://jsonmock.hackerrank.com/api/iot_devices/search?status=%s&page=%d", statusQuery, page)
		apiResponse, err := getData(url)
		if err != nil {
			log.Fatal(err)
		}
		if apiResponse.Page < apiResponse.TotalPages {
			page += 1
			nextPage = true
		} else {
			nextPage = false
		}
		for _, v := range apiResponse.Data {
			if v.Status == statusQuery {
				if v.Timestamp < max && v.Timestamp >= min && v.OperatingParams.RootThreshold > float64(threshold) {
					counter += 1
				}

			}
		}
	}
	return int32(counter)
}

func main() {
	fmt.Println(numDevices("STOPPED", int32(45), "04-2019"))

}
